import numpy as np
class Node:
  def __init__(self,parent=None,position=None):
    self.parent = parent
    self.position = position

    self.g = 0
    self.h = 0
    self.f = 0
  
  def __eq__(self,other):
    return self.position == other.position

def return_path(current_node,maze):
  path = []
  no_rows,no_columns = np.shape(maze)

  result = [[-1 for i in range(no_columns)]for j in range(no_rows)]
  current = current_node
  while current is not None:
    path.append(current.position)
    current = current.parent
  
  path = path[::-1]
  start_value = 0

  for i in path:
    result [i[0]][i[1]] = start_value
    start_value+=1
  return result
def search(maze,cost,start,end):

  start_node = Node(None,tuple(start))
  #start_node.g = start_node.h = start_node.f = 0
  end_node = Node(None,tuple(end))
  #end_node.g = end_node.h = end_node.f=0

  yet_to_visit = []
  visited = []
  yet_to_visit.append(start_node)
  outer_iterations = 0
  max_iterations = (len(maze)//2)**10
  move = [[-1,0], #up
          [0,-1], #left
          [1,0], #down
          [0,1]] #right
  
  no_rows,no_columns = np.shape(maze)

  while len(yet_to_visit) > 0:
    outer_iterations += 1

    current_node = yet_to_visit[0]
    current_index = 0

    for index,item in enumerate(yet_to_visit):
      if item.f<current_node.f:
        current_node = item
        current_index = index
    
    if outer_iterations > max_iterations:
      print("too many iters")
      return return_path(current_node,maze)
    
    yet_to_visit.pop(current_index)
    visited.append(current_node)

    if current_node == end_node:
      return return_path(current_node,maze)
    
    children = []

    for new_position in move:
      node_position = (current_node.position[0] + new_position[0],
                       current_node.position[1] + new_position[1])
      
      if(node_position[0]>(no_rows-1) or
         node_position[0]<0 or
         node_position[1]>no_columns-1 or
         node_position[1]<0):
        continue
      
      if maze[node_position[0]][node_position[1]]!=0:
        continue

      new_node = Node(current_node,node_position)

      children.append(new_node)
    
    for child in children:

      if len([visited_child for visited_child in visited if visited_child==child]) > 0:
        continue
      
      child.g = current_node.g + cost
      child.h = np.linalg.norm(np.array(child.position)-np.array(end_node.position))
      child.f = child.g +child.h

      if len([i for i in yet_to_visit if child == i and child.g>i.g])>0:
        continue
      
    yet_to_visit.append(child)
      
maze = [[0,1,0,0,0,0],
        [0,0,0,0,0,0],
        [0,1,1,1,0,0],
        [0,1,0,1,1,0],
        [0,0,0,0,1,0]]

start = [0,0]
end = [4,5]
cost = 1

path = search(maze,cost,start,end)
for i in path:
  for j in i:
        print("{:" ">3d}".format(j),end=" ")
  print()

/*

In a row of dominoes, A[i] and B[i] represent the top and bottom halves of the ith domino.  (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)

We may rotate the ith domino, so that A[i] and B[i] swap values.

Return the minimum number of rotations so that all the values in A are the same, or all the values in B are the same.

If it cannot be done, return -1.

 

Example 1:



*/

class Solution {
    public int minDominoRotations(int[] A, int[] B) {
        int len=A.length;
        int arrcommon[]=new int[7];
        int arr1[]=new int[7];
        int arr2[]=new int[7];
        int i;
        for(i=0;i<len;i++){
            ++arr1[A[i]];  //to count how many times a number occurs for A array
            ++arr2[B[i]];  //to count how many times a number occurs for B array
            if(A[i]==B[i]){     //to count common
                ++arrcommon[A[i]];   //++arrcommon[B[i]];   (alternate)
            } 
        }
        //check modified arr from 1 to 6
        for(i=1;i<=6;i++){
            if( (arr1[i]+arr2[i]-arrcommon[i]) == len ) {  
                return (Math.min(arr1[i],arr2[i]) -arrcommon[i]);  //len-Math.max(arr[i],arr2[i]) (alternate)
            }
        }
        return -1;

    }
}
